// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[0..2], a=DMux8WayOut0, b=DMux8WayOut1, c=DMux8WayOut2, d=DMux8WayOut3, e=DMux8WayOut4, f=DMux8WayOut5, g=DMux8WayOut6, h=DMux8WayOut7);
    RAM8(in=in, load=DMux8WayOut0, address=address[3..5], out=RAM8Out0);
    RAM8(in=in, load=DMux8WayOut1, address=address[3..5], out=RAM8Out1);
    RAM8(in=in, load=DMux8WayOut2, address=address[3..5], out=RAM8Out2);
    RAM8(in=in, load=DMux8WayOut3, address=address[3..5], out=RAM8Out3);
    RAM8(in=in, load=DMux8WayOut4, address=address[3..5], out=RAM8Out4);
    RAM8(in=in, load=DMux8WayOut5, address=address[3..5], out=RAM8Out5);
    RAM8(in=in, load=DMux8WayOut6, address=address[3..5], out=RAM8Out6);
    RAM8(in=in, load=DMux8WayOut7, address=address[3..5], out=RAM8Out7);
    Mux8Way16(a=RAM8Out0, b=RAM8Out1, c=RAM8Out2, d=RAM8Out3, e=RAM8Out4, f=RAM8Out5, g=RAM8Out6, h=RAM8Out7, sel=address[0..2], out=out);
}